diff --git a/config.c b/config.c
index c1d6c08..10494f8 100644
--- a/config.c
+++ b/config.c
@@ -58,6 +58,9 @@ void init_default_config(struct mako_config *config) {
 	config->button_bindings.right = MAKO_BINDING_DISMISS;
 	config->button_bindings.middle = MAKO_BINDING_NONE;
 	config->touch = MAKO_BINDING_DISMISS;
+
+	config->paths = malloc(16 * sizeof(char*));
+	memset(config->paths, 0, 16 * sizeof(char*));
 }
 
 void finish_config(struct mako_config *config) {
@@ -68,6 +71,11 @@ void finish_config(struct mako_config *config) {
 
 	finish_style(&config->superstyle);
 	finish_style(&config->hidden_style);
+
+	for (int i = 0; i < 16; i++) {
+		if (config->paths[i] != NULL) free(config->paths[i]);
+	}
+	free(config->paths);
 }
 
 void init_default_style(struct mako_style *style) {
@@ -473,6 +481,12 @@ static bool apply_config_option(struct mako_config *config, const char *name,
 		return true;
 	} else if (strcmp(name, "max-history") == 0) {
 		return parse_int(value, &config->max_history);
+	} else if (strcmp(name, "include") == 0) {
+		char *path = calloc(strlen(value), sizeof(char));
+		strcpy(path, value);
+		if (load_config_file(config, path) == 0) {
+			return true;
+		}
 	}
 
 	return false;
@@ -687,6 +701,23 @@ int load_config_file(struct mako_config *config, char *config_arg) {
 	}
 	const char *base = basename(path);
 
+	int path_idx = 0;
+	for (int i = 0; i < 16; i++) {
+		if (config->paths[i] == NULL) {
+			path_idx = i;
+			config->paths[i] = path;
+			break;
+		} else if (strcmp(config->paths[i], path) == 0) {
+			fprintf(stderr, "Config %s already loaded\n", path);
+			free(path);
+			return -1;
+		} else if (i == 15) {
+			fprintf(stderr, "Maximum configs loaded\n");
+			free(path);
+			return -1;
+		}
+	}
+
 	int ret = 0;
 	int lineno = 0;
 	char *line = NULL;
@@ -765,7 +796,10 @@ int load_config_file(struct mako_config *config, char *config_arg) {
 	free(section);
 	free(line);
 	fclose(f);
-	free(path);
+	if (ret == -1) {
+		free(config->paths[path_idx]);
+		config->paths[path_idx] = NULL;
+	}
 	return ret;
 }
 
@@ -805,6 +839,7 @@ int parse_config_arguments(struct mako_config *config, int argc, char **argv) {
 		{"on-button-right", required_argument, 0, 0},
 		{"on-button-middle", required_argument, 0, 0},
 		{"on-touch", required_argument, 0, 0},
+		{"include", required_argument, 0, 0},
 		{0},
 	};
 
diff --git a/include/config.h b/include/config.h
index f6b88ee..9e23f05 100644
--- a/include/config.h
+++ b/include/config.h
@@ -99,6 +99,8 @@ struct mako_config {
 	} button_bindings;
 
 	enum mako_binding touch;
+
+	char **paths; // paths of all loaded configs
 };
 
 void init_default_config(struct mako_config *config);
