diff --git a/config.c b/config.c
index dc6214b..0509890 100644
--- a/config.c
+++ b/config.c
@@ -63,6 +63,9 @@ void init_default_config(struct mako_config *config) {
 	config->button_bindings.right = MAKO_BINDING_DISMISS;
 	config->button_bindings.middle = MAKO_BINDING_NONE;
 	config->touch = MAKO_BINDING_DISMISS;
+
+ 	config->paths = calloc(16, sizeof(char*));
+ 	memset(config->paths, 0, 16 * sizeof(char*));
 }
 
 void finish_config(struct mako_config *config) {
@@ -72,6 +75,11 @@ void finish_config(struct mako_config *config) {
 	}
 
 	finish_style(&config->superstyle);
+
+ 	for (int i = 0; i < 16; i++) {
+ 		if (config->paths[i] != NULL) free(config->paths[i]);
+ 	}
+ 	free(config->paths);
 }
 
 void init_default_style(struct mako_style *style) {
@@ -477,6 +485,27 @@ static bool apply_config_option(struct mako_config *config, const char *name,
 		return true;
 	} else if (strcmp(name, "max-history") == 0) {
 		return parse_int(value, &config->max_history);
+ 	} else if (strcmp(name, "include") == 0) {
+ 		char *config_path = NULL;
+ 		if (value[0] == '/') {
+ 			config_path = strdup(value);
+ 		} else {
+ 			char *config_dirname = NULL;
+ 			for (int i = 0; i < 16; i++) {
+ 				if (config->paths[i] != NULL) {
+ 					config_dirname = dirname(config->paths[i]);
+ 					break;
+ 				}
+ 			}
+ 			if (config_dirname == NULL) {
+ 				return false;
+ 			}
+ 			config_path = calloc(strlen(config_dirname) + strlen(value) + 1, sizeof(char));
+ 			strcpy(config_path, config_dirname);
+ 			strcat(config_path, "/");
+ 			strcat(config_path, value);
+ 		}
+ 		return load_config_file(config, config_path) == 0;
 	}
 
 	return false;
@@ -669,6 +698,24 @@ int load_config_file(struct mako_config *config, char *config_arg) {
 	}
 	const char *base = basename(path);
 
+ 	int path_idx = 0;
+ 	for (int i = 0; i < 16; i++) {
+ 		if (config->paths[i] == NULL) {
+ 			path_idx = i;
+ 			config->paths[i] = path;
+ 			break;
+ 		} else if (strcmp(config->paths[i], path) == 0) {
+ 			fprintf(stderr, "Config %s already loaded\n", path);
+ 			free(path);
+ 			return -1;
+ 		} else if (i == 15) {
+ 			fprintf(stderr, "Maximum configs loaded\n");
+ 			free(path);
+ 			return -1;
+ 		}
+ 	}
+
+
 	int ret = 0;
 	int lineno = 0;
 	char *line = NULL;
@@ -748,7 +795,10 @@ int load_config_file(struct mako_config *config, char *config_arg) {
 	free(section);
 	free(line);
 	fclose(f);
-	free(path);
+ 	if (ret == -1) {
+ 		free(config->paths[path_idx]);
+ 		config->paths[path_idx] = NULL;
+ 	}
 	return ret;
 }
 
@@ -788,6 +838,7 @@ int parse_config_arguments(struct mako_config *config, int argc, char **argv) {
 		{"on-button-right", required_argument, 0, 0},
 		{"on-button-middle", required_argument, 0, 0},
 		{"on-touch", required_argument, 0, 0},
+		{"include", required_argument, 0, 0},
 		{0},
 	};
 
diff --git a/include/config.h b/include/config.h
index a77b679..6e8ac87 100644
--- a/include/config.h
+++ b/include/config.h
@@ -97,6 +97,8 @@ struct mako_config {
 	} button_bindings;
 
 	enum mako_binding touch;
+
+ 	char **paths; // array of all loaded configs
 };
 
 void init_default_config(struct mako_config *config);
